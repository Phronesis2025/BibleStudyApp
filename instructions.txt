# Bible Study App Design Specification

## Dark Mode Design

- Background: Dark gradient from gray-800 to blue-900 with subtle organic shapes in sky-400/10 for an uplifting feel
- Text: White and gray-400 for secondary text
- Accents: Sky-400 for interactive elements
- Typography: Headings in Poppins font (medium weight) for a friendlier tone, text-gray-50 for headings, text-gray-200 for body text
- Cards: Semi-transparent dark backgrounds with subtle borders
- Hover states: Subtle lightening of backgrounds
- Focus states: Sky-400 outline
- Loading states: Sky-400 spinners
- Error states: Red-400 text
- Success states: Green-400 text

## Layout Structure

- Header: Fixed position with dark background
- Main content: Centered with max-width-7xl
- Sidebar: Fixed position on desktop, bottom on mobile
- Cards: Consistent padding and border radius
- Forms: Dark backgrounds with light text
- Buttons: Sky-400 with hover states
- Links: Sky-400 with underline on hover

## Homepage (`app/page.tsx`)

- **Purpose:** Entry point for users to create or select a user profile.
- **Layout:** Single column with responsive sections.
- **Sections:**
  - Enhanced hero section with gradient title, clear and concise tagline, subtle background image with parallax effect, organic shapes, and a bold title with subtle glow and dynamic animation
  - "Start your Journey" button in hero section smoothly scrolls to the "Begin your Journey" section using JavaScript (`window.scrollTo` with 64px offset for fixed navigation), ensuring mobile-first UX and compatibility.
  - "Begin your Journey" card redesigned with a gradient background (from-sky-800 to-blue-900) and BookOpenIcon, vertically stacked Sign Up with Email and Sign In buttons, mobile-first layout (image top, content bottom), subtle background zoom on desktop, and Dribbble-inspired styling.
  - Navigation bar made sticky with reduced mobile height (h-14) and right-aligned Sign Up and Sign In buttons that open signup/signin modal.
  - Fixed Sign Up/Sign In modal layout: Moved Login and Google buttons inside the modal card for a cohesive design.
  - Reduced Sign Up/Sign In modal height: Adjusted padding, field sizes, font sizes, and spacing to fit within the viewport.
  - Adjusted Sign Up/Sign In modal: Reduced mobile width (max-w-sm), further reduced sizes on desktop to remove scrollbar, and horizontally aligned Login/Google buttons in a flex container for better space efficiency.
  - Updated Sign Up/Sign In modal input fields: Changed text color to black (text-black) with a lighter background (bg-gray-200) for better contrast while maintaining the dark modal theme (bg-gray-900), and improved placeholder visibility (placeholder-gray-500).
  - Enhanced Sign Up/Sign In modal appearance: Updated the modal card with a lighter semi-transparent background (bg-gray-800/90), backdrop blur effect, stronger border (border-2 border-sky-400/50), and shadow (shadow-lg) to improve contrast against the dark page background.
  - Introduction section with app description and 3 feature cards
  - "Verse of the Day" section with a dynamically changing verse, sample verse, and "Read More" button that opens a modal with a preview
  - Call-to-action section with form for creating/selecting users
  - Footer with copyright and version number
- **Components:**
  - User creation form with validation
  - User selection dropdown
  - Feature cards with icons
  - Gradient buttons with hover effects
  - Organic shapes in the hero section for a softer, more inviting look
  - CTA button in hero section to navigate to the Get Started section
  - Mobile-friendly card interactions with ripple effect and animations
  - Optimized Sign Up/Sign In modal with space-efficient design that adapts to different devices

## Reading Page (`app/reading/page.tsx`)

- **Purpose:** Display Bible verses with commentary and reflection tools.
- **Layout:** Two-column on desktop, single column on mobile.
- **Main Content:**
  - Welcome message above main content, left-aligned, styled with Poppins font, text-gray-50, with a fade-in animation.
  - Navigation bar made sticky with reduced mobile height (h-14), with right-aligned Profile and Sign Out links; Sign Out redirects to Homepage.
  - Fixed navigation bar to show Profile/Sign Out links, added padding to prevent content overlap with sticky header.
  - Styled Profile and Sign Out buttons in header to match Sign Up and Sign In buttons on Homepage (gradient and bordered styles).
  - Verse input form with dark mode styling
  - Skeleton UI during commentary loading
  - Commentary section with:
    - Titles inside each card with consistent styling (text-2xl font-semibold with border underline)
    - Order of sections: Commentary, Historical Context, Reading it Right, Applying This Verse, Denominational Perspectives, Reflection Question
    - General meaning of the verse (1-2 sentences) in the Commentary card
    - Key themes displayed at top with a nested structure for proper horizontal alignment (no wrapping) in the Commentary card
    - "Reading it Right" section with Summary, Expose, Change, and Prepare subsections
    - "Applying This Verse in Today's World" as a separate card
    - "Denominational Perspectives" with a subheader explaining different viewpoints
  - Reflection form with question and answer fields (minimum 10 characters required)
  - Share button with success/error states
  - Save button disabled until answer meets minimum length requirement
- **Sidebar:** Display shared reflections with theme tags, verse references, and likes.
  - Always shows exactly 3 theme tags per reflection for consistency
  - Shows reflections from all users within the last 30 days
  - Theme tags use color-coded background and icons based on theme type
  - Like functionality with:
    - Improved toggle mechanism that automatically determines if the user has already liked the reflection
    - UUID validation to prevent invalid ID errors
    - Enhanced error handling with detailed error logging
    - Real-time UI updates showing liked status and count

## Profile Page (`app/profile/page.tsx`)

- **Purpose:** Display user details, saved readings, and reflections.
- **Layout:** Single column with responsive cards.
- **Sections:**
  - Navigation header with "Back to Reading" link for easy navigation
  - Profile info card with user name and email
  - Name editing functionality with inline form
  - User Activity Statistics (total readings, reflections, shared reflections, total likes)
  - Favorite Themes section to show the user's most common themes
  - Saved readings section listing user's reading history
  - Reflections section showing detailed view of the user's reflections
  - Most Popular Shared Reflections subsection to highlight top shared reflections by likes
- **Features:**
  - Session validation ensures only authenticated users can access the page
  - Real-time name updates using Supabase
  - Success/error message handling
  - Loading state with spinner during data fetching
  - Consistent styling with the app's design (gradient background, sky-400 accents)
  - Mobile responsive layout with proper spacing and stacking
  - Interactive ThemeChip components showing user's top themes
  - Statistics in a responsive grid that adapts to mobile viewing
- **Components:**
  - Inline name edit form with Save and Cancel buttons
  - Reading and reflection cards with hover effects
  - Success/error message component with appropriate styling
  - Loading spinner for asynchronous operations
  - Theme visualization using the same ThemeChip component from the Reading Page
  - Activity statistics with icon and number display

## API Routes

### `/api/verse`

- **Purpose:** Fetch Bible verses from ESV API.
- **Request:** POST with body containing `verse` (string).
- **Response:** JSON object with keys: `passages` (array of verse texts), `query` (original query).

### `/api/commentary`

- **Purpose:** Generate AI commentary on Bible verses.
- **Request:** POST with body containing `verse` (string), `content` (string).
- **Response:** JSON object with keys:
  - `historical_context` (string)
  - `general_meaning` (string) - 1-2 sentences explaining the verse's meaning in simple terms
  - `commentary` (object with summarize, expose, change, prepare)
  - `application` (string)
  - `denominational_perspectives` (object with protestant, baptist, catholic)
  - `themes` (array of exactly 3 theme strings selected for their relevance to the verse)
  - `reflective_question` (string) - A short, thought-provoking question for personal application
- **Theme Restriction:** Only returns themes from the pre-defined list: faith, love, hope, grace, mercy, peace, wisdom, truth, salvation, righteousness, joy, forgiveness, obedience, humility, trust, prayer, service, holiness, redemption, eternity, teaching, accountability.
- **Theme Processing:**
  - Enhanced OpenAI prompt strictly enforces theme selection from the pre-defined list
  - Improved theme mapping logic to avoid duplicates and select more relevant alternatives
  - Alternative theme mappings prioritize contextually appropriate themes (e.g., strength â†’ wisdom rather than hope)
  - Ensures exactly 3 unique and relevant themes are returned, even if OpenAI returns duplicates or non-allowed themes

### `/api/like`

- **Purpose:** Like or unlike a reflection.
- **Request:** POST with body containing userId, reflectionId, like (boolean, true to like, false to unlike).
- **Response:** JSON object with keys: success (boolean), likes (updated number of likes), likedBy (array of user IDs who liked the reflection).
- **Processing:**
  - Updates the likes count based on the user's action (increment when liking, decrement when unliking)
  - Manages the liked_by array to track which users have liked each reflection
  - Returns the updated likes count and liked_by array in the response
  - Note: This API route is actually used as a fallback, as the app now primarily uses the Supabase RPC toggle_like function

## Database Schema

### `reflections` table

- `id` (uuid, primary key)
- `user_id` (uuid, foreign key)
- `verse` (text)
- `verse_text` (text)
- `question` (text)
- `answer` (text)
- `insight` (text)
- `themes` (text\[\]) - Always contains exactly 3 themes from the pre-defined list
- `likes` (integer, default 0)
- `liked_by` (uuid\[\]) - Array of user IDs who liked the reflection
- `created_at` (timestamp)

### `reading_log` table

- `id` (uuid, primary key)
- `user_id` (uuid, foreign key)
- `verse` (text)
- `created_at` (timestamp)

### `users` table

- `id` (uuid, primary key)
- `name` (text)
- `created_at` (timestamp)

## Supabase Functions

### `toggle_like` function

- **Purpose:** Toggle like status for a reflection directly in the database.
- **Parameters:**
  - `p_reflection_id` (uuid) - The ID of the reflection to toggle like for
  - `p_user_id` (uuid) - The ID of the user toggling the like
  - `p_like` (boolean) - Whether to like (true) or unlike (false)
- **Returns:** JSON object with updated likes count and liked_by array.
- **Implementation:**
  - Fetches current likes and liked_by with row locking to prevent race conditions
  - Adds or removes user from liked_by array based on p_like parameter
  - Updates likes count accordingly (increment when adding, decrement when removing)
  - Returns JSON object with updated values for client-side state updates
  - Includes error handling for non-existent reflections
- **Client Usage:**
  - Called via `supabase.rpc("toggle_like", {...})` with appropriate parameters
  - The client-side handleLike function now automatically determines whether to like or unlike based on the current state
  - UUID validation is performed on both IDs before making the RPC call
  - Improved error handling with detailed error logging

## Theme Configuration

Each theme has:

- Background color (with 20% opacity)
- Text color
- Icon name

Themes:

 1. faith: blue-600/20, blue-400, CrossIcon
 2. love: pink-600/20, pink-400, HeartIcon
 3. hope: green-600/20, green-400, SunIcon
 4. grace: purple-600/20, purple-400, GiftIcon
 5. mercy: pink-600/20, pink-400, HandRaisedIcon
 6. peace: green-600/20, green-400, DoveIcon
 7. wisdom: indigo-600/20, indigo-400, LightBulbIcon
 8. truth: teal-600/20, teal-400, CheckCircleIcon
 9. salvation: orange-600/20, orange-400, ShieldCheckIcon
10. righteousness: amber-600/20, amber-400, ScaleIcon
11. joy: yellow-600/20, yellow-400, SparklesIcon
12. forgiveness: pink-600/20, pink-400, HeartshakeIcon
13. obedience: blue-600/20, blue-400, CheckIcon
14. humility: indigo-600/20, indigo-400, ArrowDownIcon
15. trust: teal-600/20, teal-400, LockClosedIcon
16. prayer: purple-600/20, purple-400, DoveIcon
17. service: green-600/20, green-400, UsersIcon
18. holiness: amber-600/20, amber-400, StarIcon
19. redemption: orange-600/20, orange-400, ArrowPathIcon
20. eternity: cyan-600/20, cyan-400, ClockIcon
21. teaching: violet-600/20, violet-400, BookOpenIcon
22. accountability: rose-600/20, rose-400, UserGroupIcon

# Bible Study App Instructions

## UI & Design Specs

### Color Scheme
- **Primary Background**: Dark mode gradient (gray-800 to blue-900)
- **Accent Color**: sky-400 for interactive elements, buttons, and highlights
- **Text Colors**: gray-50 (nearly white) for primary text, gray-400 for secondary text
- **Card Backgrounds**: bg-blue-900/30 (semi-transparent dark blue)
- **Card Borders**: border-sky-500/20 (subtle sky blue border)
- **Theme Chips**: Each theme has a specific color (see Themes section)

### Typography
- **Font Family**: Poppins throughout the application
- **Heading Sizes**: 
  - Main headings: text-3xl sm:text-4xl
  - Section headings: text-xl sm:text-2xl
  - Card headings: text-lg sm:text-xl
- **Body Text**: text-base (16px)
- **Small Text**: text-sm (14px)

### Layout & Spacing
- **Mobile-First**: Design for mobile, then expand for desktop
- **Container Width**: max-w-screen-xl mx-auto (centered, max width 1280px)
- **Padding**: 
  - Page padding: px-4 py-6 sm:px-6 sm:py-8
  - Card padding: p-4 sm:p-6
- **Spacing Between Elements**: 
  - Vertical: space-y-6
  - Horizontal: space-x-4
- **Grid Layouts**: grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4

### Components
- **Cards**: bg-blue-900/30 border border-sky-500/20 rounded-lg p-4 sm:p-6
- **Buttons**: 
  - Primary: bg-gradient-to-r from-sky-400 to-blue-500 text-white
  - Secondary: border border-sky-400 text-sky-400
- **Inputs**: bg-gray-700 border border-gray-600 text-white
- **Loading States**: Use skeleton loading with pulse animation

## Theme Configuration
The app uses 22 specific themes for categorizing verse content. Each theme has:
- A unique color
- A specific icon
- Display order priority

### Theme List (ordered by priority)
1. **Faith**: blue-600, CrossIcon
2. **Love**: red-600, HeartIcon
3. **Hope**: emerald-600, StarIcon
4. **Wisdom**: amber-600, LightBulbIcon
5. **Trust**: sky-600, ShieldCheckIcon
6. **Prayer**: indigo-600, HandRaisedIcon
7. **Salvation**: fuchsia-600, ArrowPathIcon
8. **Grace**: rose-600, SparklesIcon
9. **Forgiveness**: teal-600, ArrowUturnLeftIcon
10. **Peace**: cyan-600, CloudIcon
11. **Righteousness**: lime-600, ScaleIcon
12. **Family**: purple-600, UserGroupIcon
13. **Worship**: orange-600, MusicalNoteIcon
14. **Purpose**: violet-600, MapIcon
15. **Courage**: yellow-600, BoltIcon
16. **Obedience**: green-600, CheckCircleIcon
17. **Perseverance**: rose-500, FireIcon
18. **Humility**: blue-500, ArrowDownIcon
19. **Guidance**: emerald-500, CompassIcon
20. **Joy**: amber-500, FaceSmileIcon
21. **Patience**: indigo-500, ClockIcon
22. **Community**: red-500, UsersIcon

## API Integrations

### ESV Bible API
- **Base URL**: https://api.esv.org/v3/passage/text/
- **API Key**: Stored in .env.local as NEXT_PUBLIC_ESV_API_KEY
- **Parameters**:
  - q: the verse reference (e.g., "John 3:16")
  - include-passage-references: false
  - include-verse-numbers: false
  - include-first-verse-numbers: false
  - include-footnotes: false
  - include-headings: false

### OpenAI API
- **API Key**: Stored in .env.local as NEXT_PUBLIC_OPENAI_API_KEY
- **Model**: gpt-4-turbo
- **Temperature**: 0.7
- **Max Tokens**: 2000
- **Top-p**: 1
- **Frequency Penalty**: 0.1
- **Presence Penalty**: 0.1

## Supabase Configuration

### Authentication
- **Email/Password Authentication**: Enabled with email confirmation
- **Google OAuth Provider**: Configured for production
- **Server-Side Validation**: Implemented throughout the application
- **OAuth Callback**: Enhanced with improved error handling and redirects
- **Session Handling**: Server-side validation with proper error management

### Database Tables
- **users**: Profiles table extended from auth.users
  - id: uuid (primary key)
  - created_at: timestamp with time zone
  - name: text
  
- **reflections**: User reflections on Bible verses
  - id: uuid (primary key)
  - created_at: timestamp with time zone
  - user_id: uuid (foreign key to users.id)
  - verse: text (Bible reference, e.g., "John 3:16")
  - verse_text: text (Full verse text)
  - question: text (Reflective question)
  - answer: text (User's reflection)
  - insight: text (Optional additional insight)
  - is_shared: boolean (Whether reflection is shared)
  - themes: text[] (Array of themes from the verse)
  - likes: integer (Number of likes)
  - liked_by: uuid[] (Array of user ids who liked)

- **reading_log**: Tracks user reading history
  - id: uuid (primary key)
  - created_at: timestamp with time zone
  - user_id: uuid (foreign key to users.id)
  - verse: text (Bible reference read)

### Server-Side Supabase Client
- **Location**: lib/supabaseServerClient.ts
- **Purpose**: Provides a server-side Supabase client for secure operations
- **Usage**: Import getServerSupabaseClient function for server components, route handlers, and server actions

### RPC Functions
- **toggle_like**: Toggle like status on a reflection
  - Parameters:
    - p_reflection_id: uuid (ID of the reflection)
    - p_user_id: uuid (ID of the user)
    - p_like: boolean (true to like, false to unlike)
  - Returns: JSON with updated reflection data
  - Features:
    - Row locking to prevent race conditions
    - UUID validation
    - Adds/removes user from liked_by array
    - Updates likes count

## Authentication Architecture

### Server Components
- **layout.server.tsx**: Server component that handles session validation and passes session data to client components
- **Usage**: 
  ```tsx
  import { getServerSupabaseClient } from '@/lib/supabaseServerClient'
  
  export default async function ServerLayout({ children }) {
    const supabase = getServerSupabaseClient()
    const { data: { session } } = await supabase.auth.getSession()
    // Pass session data to client component
  }
  ```

### Client Components
- **layout.client.tsx**: Client component that receives session data from server and renders appropriate UI
- **Usage**:
  ```tsx
  export default function ClientLayout({ session, children }) {
    // Use session data for client-side rendering
  }
  ```

## Testing Guide
A comprehensive testing guide is available at docs/testing-guide.md, which includes:
- Authentication flow validation
- Server-side session validation testing
- Error handling verification
- OAuth flow testing

## Feature-Specific Instructions

### Homepage (app/page.tsx)
- Mobile-first design with responsive cards
- Sign up/sign in form with email validation and clear error messages
- Hero section with parallax effect
- Feature cards explaining app functionality 
- Verse of the Day display
- "Reading it Right" methodology card

### Reading Page (app/reading/page.tsx)
- Verse search form with ESV API integration
- AI commentary section with ordered subsections
- Reflection form with validation
- Shared reflections sidebar
- Server-side session validation

### Navigation Header
- Present on all pages
- Shows different buttons based on authentication state
- Mobile-optimized design

## Development Environment Setup
- Node.js 18+ required
- npm install to install dependencies
- HTTPS required for OAuth (use "npm run dev:secure")
- Required environment variables:
  - NEXT_PUBLIC_SUPABASE_URL
  - NEXT_PUBLIC_SUPABASE_ANON_KEY
  - NEXT_PUBLIC_ESV_API_KEY
  - NEXT_PUBLIC_OPENAI_API_KEY

## Deployment
- Deployed via Vercel
- Production environment variables set in Vercel dashboard
- Production OAuth providers configured in Supabase

## Code Contribution Guidelines
- Follow mobile-first design principles
- Maintain dark mode theme consistency
- Use Tailwind CSS for styling
- Keep API calls efficient to minimize costs
- Document all major changes in CHANGELOG.md
- Test authentication flows thoroughly using the testing guide
- Ensure server-side validation is used for authentication throughout the application

## Documentation Updates
- Update CHANGELOG.md for all major changes
- Document any new API endpoints or database changes
- Update this file with new UI components or theme changes
- Keep the testing guide up-to-date with changes to authentication flows